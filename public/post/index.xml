<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MarceStarlet</title>
    <link>http://marcestarlet.github.io/post/</link>
    <description>Recent content in Posts on MarceStarlet</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>cosmo.marce &lt;at&gt; gmail &lt;dot&gt; com (Marcela Sena)</managingEditor>
    <webMaster>cosmo.marce &lt;at&gt; gmail &lt;dot&gt; com (Marcela Sena)</webMaster>
    <lastBuildDate>Sun, 17 Apr 2016 18:51:49 -0500</lastBuildDate>
    <atom:link href="http://marcestarlet.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>Messaging Systems</title>
            <link>http://marcestarlet.github.io/blog/2016/04/17/messaging-systems/</link>
            <pubDate>Sun, 17 Apr 2016 18:51:49 -0500</pubDate>
            <author>cosmo.marce &lt;at&gt; gmail &lt;dot&gt; com (Marcela Sena)</author>
            <guid>http://marcestarlet.github.io/blog/2016/04/17/messaging-systems/</guid>
            <description>

&lt;h1 id=&#34;what-messaging-system-means:4c1887b8f0e1a768fcf12d83e1d1e072&#34;&gt;What &amp;ldquo;Messaging System&amp;rdquo; means?&lt;/h1&gt;

&lt;p&gt;The Messaging Systems exist since some years ago but they&amp;rsquo;re not so popular as other kind of systems.&lt;/p&gt;

&lt;p&gt;A Messaging is usually use in an enterprise environment. An enterprise has many different applications working independently that have been built using different languages and platforms, if the enterprise needs to communicate them by sharing data and process in a diligent way, &lt;strong&gt;How the enterprise can do this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using Messaging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Messaging allows the enterprise to share data from applications that have been built in different platforms and uses different kind of data by transforming the data in a common customized or not customized format and transferring the packed data between the applications. In a reliably, asynchronously, frequent and immediate transfer way, a Messaging System improves the enterprise communication.&lt;/p&gt;

&lt;p&gt;Messaging makes applications loosely coupled and with an asynchronous sending, the applications do not need to be running at the same time in ordert to transfer data, so this does the enterprise more reliable. Messaging delegtes &amp;ldquo;&lt;strong&gt;&lt;em&gt;messagging systems&lt;/em&gt;&lt;/strong&gt;&amp;rdquo; the responsibility of transfer the data between applications, so the applications do not need to worry about how the data is transfered but they worry about what data shold be transfer.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;http://marcestarlet.github.io/img/Messaging.png&#34; alt=&#34;Messaging&#34;/&gt;
&lt;/p&gt;
                               

&lt;p&gt;In order to transfer the data from different applications an EMS is needed. An &lt;strong&gt;EMS&lt;/strong&gt; (Enterprise Messaging System) is a set of published enterprise-wide standards that allows organizations to send semantically precise messages between computer systems. EMS systems promote loosely coupled architectures that allow changes in the formats of messages to have minimum impact on message subscribers. EMS systems are facilitated by the use of structured messages (such as using XML or JSON), and appropriate protocols, such as DDS, MSMQ, AMQP or SOAP with web services.&lt;/p&gt;

&lt;p&gt;So at the end, a MOM (Message-Oriented Middleware) software solution is required to support sending and receiving messages in distributed systems. This software is specialized about communication, a MOM provides transforming, standardized protocols, communication routes (channels, pipes, etc.), a Message broker, and the APIs required to connect with.&lt;/p&gt;

&lt;p&gt;A robust MOM it is not always necessary, so far for many of the current systems that pretend to be simple but powerful, an answer to the new lightweight demands a &lt;strong&gt;&lt;em&gt;Message Broker&lt;/em&gt;&lt;/strong&gt; it is enough to cover the message communication for the enterprise.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;Message Broker&lt;/em&gt; is an intermediary program module that translates a message from the formal messaging protocol of the sender to the formal messaging protocol of the receiver. A message broker is an architectural pattern for message validation, transformation and routing.[1] It mediates communication amongst applications, minimizing the mutual awareness that applications should have of each other in order to be able to exchange messages, effectively implementing decoupling.&lt;/p&gt;

&lt;p&gt;The purpose of a broker is to take incoming messages from applications and perform some action on them. The following are examples of actions that might be taken in by the broker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Route messages to one or more of many destinations&lt;/li&gt;
&lt;li&gt;Transform messages to an alternative representation&lt;/li&gt;
&lt;li&gt;Perform message aggregation, decomposing messages into multiple messages and sending them to their destination, then recomposing the responses into one message to return to the user&lt;/li&gt;
&lt;li&gt;Interact with an external repository to augment a message or store it&lt;/li&gt;
&lt;li&gt;Invoke Web services to retrieve data&lt;/li&gt;
&lt;li&gt;Respond to events or errors&lt;/li&gt;
&lt;li&gt;Provide content and topic-based message routing using the publish–subscribe pattern&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;http://marcestarlet.github.io/img/MessageBroker.png&#34; alt=&#34;Message Broker&#34;/&gt;
&lt;/p&gt;
                                

&lt;p&gt;These are some of the most popular Message Brokers: Apache ActiveMQ, RabbitMQ, HiveMQ, Apache Kafka.&lt;/p&gt;

&lt;h3 id=&#34;where-a-messaging-systems-should-be-used:4c1887b8f0e1a768fcf12d83e1d1e072&#34;&gt;Where a Messaging Systems should be used?&lt;/h3&gt;

&lt;p&gt;As many of the systems and software solutions you can&amp;rsquo;t apply the Messaging System anywhere, but there are some specific scenarios where it should be use in order to improve the communication. The Messaging Systems should be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In an enterprise that necessary require a reliable communication between applications.&lt;/li&gt;
&lt;li&gt;In distributed systems that wants to communicate data from different endpoints.&lt;/li&gt;
&lt;li&gt;When have different applications that only must to be worried about what data will be transferred and don&amp;rsquo;t care how it is transferred.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some examples where a Messaging System is used: Apache TomEE, Eclipse, Whatsapp, etc.&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>MQTT-2</title>
            <link>http://marcestarlet.github.io/blog/2016/01/21/mqtt-2/</link>
            <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
            <author>cosmo.marce &lt;at&gt; gmail &lt;dot&gt; com (Marcela Sena)</author>
            <guid>http://marcestarlet.github.io/blog/2016/01/21/mqtt-2/</guid>
            <description>

&lt;h2 id=&#34;mqtt-the-protocol:b3058168f3f01b1a65df5dddd8eebfa5&#34;&gt;MQTT - The protocol&lt;/h2&gt;

&lt;p&gt;Now that you know the reason of the existence of MQTT and where to use it, you can learn how it works and then how to use it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My philosophy: Only when we know the reason of why a technology exists and where we can apply it, the technology becomes real, otherwise does not exists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now some context, take it from Wikipedia the definition of protocol:
In telecommunications, a communications protocol is a system of rules that allow two or more entities of a communications system to transmit information via any kind of variation of a physical quantity. These are the rules or standard that defines the syntax, semantics and synchronization of communication and possible error recovery methods. Protocols may be implemented by hardware, software, or a combination of both.&lt;/p&gt;

&lt;p&gt;The MQTT protocol is based on top of TCP/IP and both client and &lt;em&gt;broker need&lt;/em&gt; to have a TCP/IP stack.&lt;/p&gt;

&lt;h2 id=&#34;mqtt-elements:b3058168f3f01b1a65df5dddd8eebfa5&#34;&gt;MQTT Elements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Publish/Subscriber&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Broker (Server)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;publish-subscriber:b3058168f3f01b1a65df5dddd8eebfa5&#34;&gt;Publish/Subscriber&lt;/h3&gt;

&lt;p&gt;The publish/subscribe pattern (pub/sub) is an alternative to the traditional client-server model, where a client communicates directly with an endpoint. However, &lt;strong&gt;Pub/Sub decouples a client, who is sending a particular message (called publisher) from another client (or more clients), who is receiving the message (called subscriber)&lt;/strong&gt;. This means that the publisher and subscriber don’t know about the existence of one another. There is a third component, called broker, which is known by both the publisher and subscriber, which filters all incoming messages and distributes them accordingly.&lt;/p&gt;

&lt;p&gt;Advantages of this pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Decoupling of the clients&lt;/strong&gt;, publishers and receivers, do not need to know about each others, do not need to be running at the same time, and the operations on both components do not affect the other.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message filtering&lt;/strong&gt; is the ability that pub/sub defines so the receivers do only receive the messages they are interested in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;. Can be highly parallelized and processed event-driven.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;MQTT takes advantages of all of these characterístics of the pub/sub pattern.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://marcestarlet.github.io/img/hivemq_ps.png&#34; alt=&#34;Take it from HiveMQ MQTT blog&#34; title=&#34;Pub/Sub example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This fragment was taken from the HiveMQ MQTT blog documentation&lt;/em&gt; &lt;a href=&#34;http://www.hivemq.com/blog/mqtt-essentials-part2-publish-subscribe&#34; title=&#34;hivemq&#34;&gt;HiveMQ Pub/Sub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;client:b3058168f3f01b1a65df5dddd8eebfa5&#34;&gt;Client&lt;/h3&gt;

&lt;p&gt;As we have explained in the previous section we can infer that a client can be both a publisher or a subscriber acting under the different purposes they have, or be both at the same time. A publisher is the client destined to accomplish the task of send messages to the MQTT Broker, so then, the subscriber is charged to subscribe to the broker and receive the messages that is interested in.&lt;/p&gt;

&lt;p&gt;Therefore, a client is any device using the MQTT library and executes the corresponding to connect to a MQTT broker, through a network.&lt;/p&gt;

&lt;p&gt;The MQTT protocol has many library implementations in most of the programming languages such as Java, Android, Arduino, C, C++, C#, Go, iOS, JavaScript, .NET.&lt;/p&gt;

&lt;h3 id=&#34;broker:b3058168f3f01b1a65df5dddd8eebfa5&#34;&gt;Broker&lt;/h3&gt;

&lt;p&gt;The Broker is the heart of the protocol, it is the component that makes the protocol real. The Broker is in charge of establish connections with all clients, receive all the messages, filter and deliver them to the corresponding interested subscribers. Besides, it persists the messages needed, keeps sessions with the clients, security by supporting authorization and authentication, etc. As it is responsible of communication between clients it must support failover scenarios to recover itself, should be scalable as well as easy to integrate in backend systems.&lt;/p&gt;

&lt;p&gt;The Clients connect to the Broker and the broker connects the clients each other.&lt;/p&gt;

&lt;p&gt;Some Brokers that implements MQTT are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ActiveMQ&lt;/li&gt;
&lt;li&gt;Apache Apollo&lt;/li&gt;
&lt;li&gt;HiveMQ&lt;/li&gt;
&lt;li&gt;Mosquitto&lt;/li&gt;
&lt;li&gt;Moquette&lt;/li&gt;

&lt;li&gt;&lt;p&gt;RabbitMQ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WebSpehreMQ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JBoss A-MQ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IBM Integration Bus&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the Next post of the MQTT protocol I&amp;rsquo;ll explain you the concepts of the protocol like: QoS, Session, Topics, Connections, MQTT Messages, etc. Also, we&amp;rsquo;ll see how to use the protocol by implementing some clients that will connect to a MQTT Broker.&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>MQTT</title>
            <link>http://marcestarlet.github.io/blog/2016/01/14/mqtt/</link>
            <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
            <author>cosmo.marce &lt;at&gt; gmail &lt;dot&gt; com (Marcela Sena)</author>
            <guid>http://marcestarlet.github.io/blog/2016/01/14/mqtt/</guid>
            <description>

&lt;h2 id=&#34;introduction:5fd2cda0d65f33524ef5f5ee55ef39d1&#34;&gt;INTRODUCTION&lt;/h2&gt;

&lt;h3 id=&#34;what-about-mqtt:5fd2cda0d65f33524ef5f5ee55ef39d1&#34;&gt;What about MQTT?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Have you heard about MQTT?&lt;/strong&gt; Hope you have, but if you haven&amp;rsquo;t, don&amp;rsquo;t worry you&amp;rsquo;ll be hearing more about it in the next months since it&amp;rsquo;s becoming popular.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MQTT&lt;/strong&gt; is the most popular protocol used for IoT (internet of things) but don&amp;rsquo;t get confused, MQTT isn&amp;rsquo;t only for IoT, as it is a protocol it can be used in most of the communication situations, like TCP/IP does, but there are some great things that becomes MQTT special and unique to solve a communication problem.&lt;/p&gt;

&lt;h3 id=&#34;history:5fd2cda0d65f33524ef5f5ee55ef39d1&#34;&gt;History&lt;/h3&gt;

&lt;p&gt;MQTT was born in the IBM labs in 1999, when they faced a situation where they needed to save battery energy and use minimal bandwidth communication for a satellite connection. MQTT has a long story about its supposed acronym meanning, but what you should know about it, is: that the acronym does not exists anymore and you should only call it MQTT. Courious fact: I know about MQTT because of its acronym meanning that comes from an old IBM product called &amp;ldquo;MQ Series&amp;rdquo; that uses this &amp;ldquo;Telemetry Transport&amp;rdquo; protocol.&lt;/p&gt;

&lt;p&gt;Well, after some history we can pass to a more excited section that defines to us the MQTT protocol.&lt;/p&gt;

&lt;h3 id=&#34;what-really-is-mqtt:5fd2cda0d65f33524ef5f5ee55ef39d1&#34;&gt;What really is MQTT?&lt;/h3&gt;

&lt;p&gt;MQTT is a lightweightm, open, simple and easy to implement Client Server publish/subscribe messaging transport protocol.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;lightweight&amp;rdquo;&lt;/em&gt; because is binary and it has only minimal packet overhead.&lt;br /&gt;
&lt;em&gt;&amp;ldquo;open&amp;rdquo;&lt;/em&gt; because since it became standard, the OASIS open organization took it under their tutelage.&lt;br /&gt;
&lt;em&gt;&amp;ldquo;simple&amp;rdquo;&lt;/em&gt; because is extremely easy to implement in the client side.&lt;/p&gt;

&lt;p&gt;Therfore, it was created to run over constrained devices with limited resources.&lt;/p&gt;

&lt;p&gt;Ta, Tan! Yep, these are the things that makes MQTT special. Think on these 3 things, related to the constrained and limited devices. First, the devices, what kind of devices are limited? a Microwave, a Refrigerator, a Watch, etc., ok then start thinking, why you want to communicate your microwave or refrigerator to other devices more complex and less limited? Because we&amp;rsquo;re in the XXI century and we&amp;rsquo;re smart people and we&amp;rsquo;re programmers and someone has invented a lightweight and simple protocol to do that and taking in account all of these reasons, just because we want smart houses, smart cities and change the world, so please start thinking on this when you want to learn more about MQTT and you want to use it to solve a communication problem.&lt;/p&gt;

&lt;p&gt;In the next post I&amp;rsquo;ll tell you more about the Client Server and publish/subscribe transport protocol.&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>Welcome 2016</title>
            <link>http://marcestarlet.github.io/blog/2016/01/14/welcome-2016/</link>
            <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
            <author>cosmo.marce &lt;at&gt; gmail &lt;dot&gt; com (Marcela Sena)</author>
            <guid>http://marcestarlet.github.io/blog/2016/01/14/welcome-2016/</guid>
            <description>

&lt;h2 id=&#34;el-comienzo-the-begining:a8158e2ae96b1b34e1f733f49d15bcfd&#34;&gt;El comienzo/The begining&lt;/h2&gt;

&lt;p&gt;Hola/Hi&lt;/p&gt;

&lt;p&gt;Mi nombre es Marcela Sena conocida como MarceStarlet, tengo 28 años, soy Ingeniero de Software y vivo en Guadalajara, Jal., México; les doy la bienvenida a éste mi nuevo blog de programación/conceptos/tecnologías/herramientas/tendencias/ciencias computacionales/etc., esperando sea de su agrado.&lt;/p&gt;

&lt;p&gt;La idea de este blog es compartirles lo que sé, lo que estoy aprendiendo, y lo que me gustaría aprender, todo relacionado con las ciencias computacionales. El reto para mi es escribirles frecuentemente; al menos una vez al mes encontrarán un post.&lt;/p&gt;

&lt;p&gt;Ahora les hablaré sobre lo que estoy usando para bloggear, les presento a &amp;ldquo;hugo&amp;rdquo;, un framework de propósito general para construir websites, y por website técnicamente concluimos que es un generador de sitios estáticos. Enfocado a la sencillez y rendimiento, está programado en &amp;ldquo;go&amp;rdquo; y es multiplataforma (Win, Mac, Linux). Este framework me lo presentó uno de mis ingenieros favoritos en todo el mundo: &amp;ldquo;Juan Sandoval&amp;rdquo;, y ahora se los presento yo a ustedes. Si quieren saber más sobre hugo, clic &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34; title=&#34;aquí&#34;&gt;hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Además, les comento de antemano que estaré bloggeando en inglés para que el blog tenga más alcance.&lt;/p&gt;

&lt;p&gt;Gracias&lt;/p&gt;

&lt;p&gt;/&lt;/p&gt;

&lt;p&gt;My name is Marcela Sena well known as MarceStarlet, I&amp;rsquo;m 28 years old, I&amp;rsquo;m a Software Engineer and I live in Guadalajara, Jal., Mexico, I welcome you to my new blog about programming/concepts/technologies/tools/computer science/etc., hoping that you will enjoy.&lt;/p&gt;

&lt;p&gt;The main idea of this blog is sharing what I know, what I&amp;rsquo;m learning, and what I want to learn, all related to computer science. The challenge for me is write for you as frequently as I can; at least once per month you will find a post here.&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;m going to talk about what I&amp;rsquo;m using for blogging, let me introduce you to &amp;ldquo;hugo&amp;rdquo;, a general-purpose website framework, and for website we can technically conclude that is a static site generator. Focused in simplicity and performance, it was programmed in &amp;ldquo;go&amp;rdquo;, and it is cross platform (Win, Mac, Linux). This framework has been introduced to me by one of my favorite Engineers in the world: &amp;ldquo;Juan Sandoval&amp;rdquo;, and now I&amp;rsquo;m introducing it to you. If you want to know a little bit more about hugo, click &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34; title=&#34;here&#34;&gt;hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, I tell you in advance that I&amp;rsquo;ll be blogging in english to have more scope.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
      
    
  </channel>
</rss>
